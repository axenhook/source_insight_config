<?xml version="1.0" encoding="utf-8"?>
<SourceInsightCodeSnippets
	AppVer="4.00.0086"
	AppVerMinReader="4.00.0019"
	>
	<SnippetList>
		<Snippet
			Name="case"
			Description="case label"
			Language="C Family"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>case $label$:
	$end$
	break;


</Snippet>
		<Snippet
			Name="class"
			Description="new class"
			Language="All"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			><![CDATA[#include <pthread.h>

class $class_name$
{
public:
	$class_name$();
	~$class_name$();
	bool initialize(void);
private:
};

class $class_name$
{
protected:
	$class_name$();
	~$class_name$();
	bool initialize(void);
	
public:
	static $class_name$* get_instance(void);
	static void release_instance(void);

private:
	$class_name$(const $class_name$&){};
	$class_name$& operator=(const $class_name$&){};
	
	static $class_name$* p_instance_;
	static pthread_mutex_t mutex_;
};

pthread_mutex_t $class_name$::mutex_;
$class_name$* $class_name$::p_instance_ = nullptr;

/******************************************************************************
 Prototype   : $class_name$.$class_name$
 Description : constructor function
 Input       : None
 Output      : None
 Return Value: None
 
 History        :
  1.Data        : 
    Author      : Leon
    Modification: Created function.
 ******************************************************************************/
$class_name$::$class_name$()
{

}

/******************************************************************************
 Prototype   : $class_name$.~$class_name$
 Description : destructor function
 Input       : None
 Output      : None
 Return Value: None
 
 History        :
  1.Data        : 
    Author      : Leon
    Modification: Created function.
 ******************************************************************************/
$class_name$::~$class_name$()
{

}

/******************************************************************************
 Prototype   : $class_name$.initialize
 Description : initialize data function
 Input       : None
 Output      : None
 Return Value: None
 
 History        :
  1.Data        : 
    Author      : Leon
    Modification: Created function.
 ******************************************************************************/
bool $class_name$::initialize(void)
{
	bool ret = false;

	ret = true;
	
	return ret;
}

/******************************************************************************
 Prototype   : $class_name$.get_instance
 Description : get a instance
 Input       : void 
 Output      : None
 Return Value: bll_traverse_partition*
 
 History        :
  1.Data        : 
    Author      : Leon
    Modification: Created function.
 ******************************************************************************/
$class_name$* $class_name$::get_instance(void)
{
	if (nullptr == p_instance_)
	{
		pthread_mutex_lock(&mutex_);
		if (nullptr == p_instance_)
		{
			p_instance_ = new $class_name$();
		}
		pthread_mutex_unlock(&mutex_);
	}
	return p_instance_;
}

/******************************************************************************
 Prototype   : $class_name$.release_instance
 Description : release a instance
 Input       : void 
 Output      : None
 Return Value: void
 
 History        :
  1.Data        : 
    Author      : Leon
    Modification: Created function.
 ******************************************************************************/
void $class_name$::release_instance(void)
{
	if (nullptr != p_instance_)
	{
		pthread_mutex_lock(&mutex_);
		if (nullptr != p_instance_)
		{
			delete p_instance_;
			p_instance_ = nullptr;
		}
		pthread_mutex_unlock(&mutex_);
	}
}
]]></Snippet>
		<Snippet
			Name="date"
			Description="insert today&apos;s date"
			Language="All"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="0"
			>$date$ $current_function$ $current_symbol$ 

This is cool.

</Snippet>
		<Snippet
			Name="dowh"
			Description="do while loop"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>do
{
	$block$
}
while ($condition$)

</Snippet>
		<Snippet
			Name="for"
			Description="for loop"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			><![CDATA[for ($i$ = $start$; $i$ < $limit$; ++$i$)
{
	$end$
}
]]></Snippet>
		<Snippet
			Name="forsur"
			Description="surround with for loop"
			Language="C Family"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			><![CDATA[for ($i$ = $start$; $i$ < $limit$; ++$i$)
{
	$selection$
}
]]></Snippet>
		<Snippet
			Name="for_int"
			Description="for loop with int interator"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			><![CDATA[for (int $i$ = $start$; $i$ < $limit$; ++$i$)
{
	$end$
}
]]></Snippet>
		<Snippet
			Name="if"
			Description="if block"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>if ($i$)
{
	$end$
}
</Snippet>
		<Snippet
			Name="ife"
			Description="if-else block"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>if ($i$)
{
	$trueblock$
}
else
{
	$falseblock$
}
</Snippet>
		<Snippet
			Name="ifsur"
			Description="surround with if block"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>if ($i$)
{
	$selection$
}
</Snippet>
		<Snippet
			Name="newfunc"
			Description="new function"
			Language="C/C++, C#"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>$type$ $function_name$($params$)
{
	$end$
}


</Snippet>
		<Snippet
			Name="switch"
			Description="switch block"
			Language="C/C++, C#"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>switch ($value$)
{
	$case$ :
		break;
	default:
		break;
}
</Snippet>
		<Snippet
			Name="test"
			Description=""
			Language="All"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>this is a test
</Snippet>
		<Snippet
			Name="time"
			Description="insert the current time"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="0"
			>$time$
</Snippet>
		<Snippet
			Name="while"
			Description="while loop"
			Language="All with { }"
			Enabled="1"
			EnableVariables="1"
			StartOnNewLine="1"
			>while ($cond$)
{
	$end$
}
</Snippet>
	</SnippetList>
</SourceInsightCodeSnippets>
